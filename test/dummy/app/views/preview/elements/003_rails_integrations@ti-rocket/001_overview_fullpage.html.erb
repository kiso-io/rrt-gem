<div class='container-fluid'>
  <div class="jumbotron blue-800 text-blue-50 full-bleed">
    <h1><%= @title = "Rails Integration" %></h1>
    <p class="subtitle">Rails, but looking great and making you look amazing.</p>
  </div>

      <div class="row">
        <div class="col-xs-12 col-sm-12 col-md-8 col-md-offset-1">
          <section>
            <h1 id='getting-started' class="header m0">Getting Started</h1>
            <h4>FIRST THINGS FIRST</h4>
            <p>Once you have included the Rapid Rails Themes gem in your Gemfile, along with its custom source, and run <code>bundle install</code>, you're almost done. The first thing is to run the main generator by executing <code>rails g rrt:install</code> (note the three 's' in 'rrt'!). You will be prompted if anything will be overwritten, and if you're not sure say no and double check first that you won't overwrite anything you need.</p>

            <h4>LETS MAKE A GORGEOUS DASHBOARD IN 10 SECONDS</h4>
            <p>If you want to see what else you can run next, take a look at the <a href="#generators">Code Generators</a> section below, or run the command <code>bundle exec rails g | grep 'rrt'</code> in your terminal. A fun thing to run next might be the dashboard geneartor since it will give you something nice to look at. First we need to generate the Dashboard view itself: <code>bundle exec rails g rrt:dashboard home dashboard</code> - this will generate the Dashboard view on the <code>home</code> controller under the <code>dashboard</code> action. </p>
            <p>Next, we'll generate the <strong>SideNav</strong> layout: <code>bundle exec rails g rrt:sidenav home sidenav</code> - this will generate the SideNav layout and add the <code>layout 'sidenav'</code> directive to the <code>HomeController</code>. Don't foget to add a Route in your <code>config/routes.rb</code> for the dashboard. Once you've dont that, and you hit the URL for the dashboard you should be greeted with something that looks like this: </p>
            <img src='/dashboard.png' class='thumbnail text-center'/>
            <p>Pretty nice, eh? </p>

            <h4>NEXT STEPS</h4>
            If you want to customize the theme further you can run the <code>rails g rrt:customize</code> generator, which will create a <code>rrt.css.scss</code> file where you can override variables, remove anything that's included that you don't need and so on.

            <h4>NEED HELP? QUESTIONS? COMPLIMENTS?</h4>
            <p><strong>I'm here to help.</strong> I want you to succeed and have a good time. If you're having trouble, just email me directly at <a href="mailto:john@rrt.com">john@rrt.com</a> and I'll get back to you as quick as I can.</p>
          </section>
          <section>
            <h1 id="rails-helpers" class="header">Rails Helpers</h1>
            <p>Dressed themes provide Rails Helpers for the following key areas: Forms, Dropdowns, and Icons. They are Helpers in the true sense of the word - they help cut down on the work required to use the feature they support.</p>

            <h2>Forms</h2>

            <p><code>error_notification</code> renders error notifications on top of forms.</p>
            <%= code_block do %>
            <%%= form_for @user do |f|  %>
            <%%= f.error_notification %>
            ...
            <%% end %>
            <% end %>
            <p>If any error is present on the object the following message will be displayed.</p>
            <div class="alert alert-danger">
              <%= fa_icon_tag("remove") %> 3 errors prohibited this user from from being saved.
            </div>

            <p><code>form_group</code> can be used on form builders (inside <code>form_for</code>). It will handle displaying error messages next to fields and adding the proper classes to the wrapping <code>&lt;div class="form-group"&gt;</code>.</p>
            <%= code_block do %>
            <%%= f.form_group :name do |f| %>
            <%%= f.label :name, class: 'control-label' %>
            <div class="controls">
              <%%= f.text_field :name %>
              <%%= f.error_messages %>
            </div>
            <%% end %>
            <% end %>
            <p>The <code>form_group</code> helper will also take an addition CSS class parameter to use when there are errors, allowing you to override th default <code>error</code> class to something else:

            <%= code_block do %>
            <%%= f.form_group :name, 'has-error' do |f| %>
            <%%= f.label :name, class: 'control-label' %>
            <div class="controls">
              <%%= f.text_field :name %>
              <%%= f.error_messages %>
            </div>
            <%% end %>
            <% end %>

            <p>See the Bootstrap form documentation for proper usage of the <code>&lt;div class="form-group"&gt;</code> in forms.</p>


            <h2>Dropdowns</h2>

            <p><code>activatable_li_tag</code> generates an <code>&lt;li&gt;</code> tag with the <code>active</code> class added if the url is the current one. Useful for navbar and dropdowns.</p>
            <%= code_block do %>
            <%%= activatable_li_tag users_path do |url| %>
            <%%= link_to "Users", url %>
            <%% end %>
            <% end %>

            <p><code>activatable_li_tag_with_link</code> generates an <code>&lt;li&gt;</code> tag with the <code>active</code> class added if the url is the current one, with a link inside it pointing to that url. The following code produces the same as the example before.</p>
            <%= code_block do %>
            <%%= activatable_li_tag_with_link users_path %>
            <% end %>

            <p>Both <code>activatable_li_tag</code> and <code>activatable_li_tag_with_link</code> can take an optional CSS class that will always be applied as the last parameter</p>

            <p><code>dropdown_menu</code> renders a dropdown menu that can be used inside navbars and tabs.</p>
            <%= code_block do %>
            <%%= dropdown_menu "Dropdown" do %>
            <%%= activatable_li_tag_with_link "This page", "#{}" %>
            <%%= activatable_li_tag_with_link "...", "..." %>
            <%% end %>
            <% end %>
            <p>The previous code rendered inside a <code>&lt;ul class="nav nav-pills"&gt;</code> will produce the following.</p>
            <ul class="nav nav-pills">
              <li class="active"><%= link_to "Active link", '#' %></li>
              <%= dropdown_menu "Dropdown" do %>
              <%= activatable_li_tag_with_link "This page", "#" %>
              <%= activatable_li_tag_with_link "Fancy forms", "#" %>
              <%= activatable_li_tag_with_link "Classy tables", "#" %>
              <%= activatable_li_tag_with_link "Pricing table", "#" %>
              <% end %>
            </ul>

            <p><code>dropdown_button</code> renders a dropdown menu that can be used inside button groups.</p>
            <%= code_block do %>
            <%%= dropdown_button "Dropdown" do %>
            <%%= activatable_li_tag_with_link "This page", "#" %>
            <%%= activatable_li_tag_with_link "...", "..." %>
            <%% end %>
            <% end %>

            <p>The previous code rendered inside a <code>&lt;div class="btn-group"&gt;</code> will produce the following.</p>
            <div class="btn-group">
              <%= dropdown_button "Dropdown" do %>
              <%= activatable_li_tag_with_link "This page", "#" %>
              <%= activatable_li_tag_with_link "Fancy forms", "#" %>
              <%= activatable_li_tag_with_link "Classy tables", "#" %>
              <%= activatable_li_tag_with_link "Pricing table", "#" %>
              <% end %>
            </div>


            <h2>Icons</h2>

            <p><code>fa_icon_tag</code> renders any available icon from FontAwesome. Use without the <code>icon-</code> prefix.</p>
            <%= code_block do %>
            <%%= fa_icon_tag("heart") %>
            <% end %>

            <p><code>ionicon_icon_tag</code> renders any available icon from Ionicons. Use without the <code>icon ion-</code> prefix.</p>
            <%= code_block do %>
            <%%= ionicon_icon_tag("heart") %>
            <% end %>

            <p><code>glyphicon_tag</code> renders any available icon from Glyphicons. Use without the <code>glyphicon glyphicon-</code> prefix.</p>
            <%= code_block do %>
            <%%= fa_icon_tag("heart") %>
            <% end %>

            <p><code>mdi_icon_tag</code> renders any available icon from Material Design Icons.</p>
            <%= code_block do %>
            <%%= mdi_icon_tag("heart") %>
            <% end %>

            <h2>Minimal Devices</h2>
            <p>Want a snazzy looking CSS-only Apple device to hold some screenshot? There's a bunch of helpers for that:</p>
            <%= code_block do %>
              <%%= device_imac do %>
                <%%= image_tag 'http://fillmurray.com/230/129' %>
              <%% end %>
            <% end %>

            <%= code_block do %>
            <%%= device_macbook do %>
              <%%= image_tag 'http://fillmurray.com/230/129' %>
            <%% end %>
            <% end %>

            <%= code_block do %>
            <%%= device_ipad do %>
              <%%= image_tag 'http://fillmurray.com/230/129' %>
            <%% end %>
            <% end %>

            <%= code_block do %>
            <%%= device_iphone do %>
              <%%= image_tag 'http://fillmurray.com/230/129' %>
            <%% end %>
            <% end %>

            <h2>SASS Helpers</h2>
            <p>We also provide some handy SASS helpers for various common tasks:</p>

            <h3>Color lookup</h3>
            <p>By including <code>'rrt/color'</code> in your SASS file, you'll get access to the Material Design color palette and a handy lookup function:</p>
            <%= code_block do %>
              color: color($grey, 400);
              background-color: color($grey, 50);
            <% end %>

          </section>

          <section>
            <h1 id='layouts' class="header">Layouts</h1>


            <h2>Application</h2>
            <p>The application layout, located at <code>app/views/layouts/application.html.{erb,haml}</code>, is the default layout. It contains a header section and sidebar. Being based on Bootstrap 12-column grid, the structure of that layout is easily customizable.</p>

            <h2>Home</h2>
            <p>The home layout, located at <code>app/views/layouts/home.html.{erb,haml}</code> is similar the application layout but doesn't contain any sidebar. It is useful for rendering landing pages, about, contact pages and the like. The generate the view for the home page, use the <code>rails generate rrt:landing{1,2,3}</code> code generator, described bellow.</p>


            <h2>Pricing</h2>
            <p>The pricing layout is a view (and not a layout in the Rails-sense) rendered inside the home layout to display pricing plans to visitors. You can generate that view using the <code>rails generate rrt:pricing</code> code generator, described bellow.</p>

            <h2>_base</h2>
            <p>Each layout is rendered inside a <em>partial layout</em>, <code>_base.html.erb</code> or <code>_base.html.haml</code>, thus removing any repetition. Containing a header, footer and common components. It's easy to create your own custom layout by using this partial.</p>


            <h2>_minimal</h2>
            <p>The Minimal layout simply provides the user nav bar, and a fluid container with one row. For example, Landing Page 3 uses this layout.
            </p>

            <h2>SideNav</h2>
            <p>The SideNav layout provides a standard right-located Menu with main content area to the left. The menu is in fixed position, allowing the content area to scroll as needed.</p>
          </section>

          <section id="helpers">
            <h1 id='generators' class="header">Code generators</h1>


            <h2>Scaffold integration</h2>
            <p>This theme comes with its own <code>rails generate scaffold</code> templates. Each time you generate code scaffolding, you'll start with a nice looking set of views.</p>

            <p>See on the top navbar under the <em>Rails / Scaffold views</em> menu for samples.</p>

            <h2>Rapid Rails Themes generators</h2>
            <dl>
              <dt><code>rails generate rrt:install</code></dt>
              <dd>Will install the theme files in your app. Just run this command and you're done.</dd>

              <dt><code>rails generate rrt:customize</code></dt>
              <dd>Generates the customizable <code>rrt.css.scss</code> file that you can use to override / tweak the theme variables and includes</dd>

              <dt><code>rails generate rrt:landing1 CONTROLLER ACTION</code></dt>
              <dd>Generates the Landing 1 template at app/views/CONTROLLER/ACTION</dd>

              <dt><code>rails generate rrt:landing2 CONTROLLER ACTION</code></dt>
              <dd>Generates the Landing 2 template at app/views/CONTROLLER/ACTION</dd>

              <dt><code>rails generate rrt:landing3 CONTROLLER ACTION</code></dt>
              <dd>Generates the Landing 3 template at app/views/CONTROLLER/ACTION</dd>

              <dt><code>rails generate rrt:pricing CONTROLLER ACTION</code></dt>
              <dd>Generates a pricing style view at app/views/CONTROLLER/ACTION.</dd>

              <dt><code>rails generate rrt:error_pages</code></dt>
              <dd>Generates standard Error pages for 403, 404, 422 and 500 statuses at public/.</dd>

              <dt><code>rails generate rrt:devise</code></dt>
              <dd>Generates the Rapid Rails Themes custom Devise views and Email templates into your application.</dd>

              <dt><code>rails generate rrt:error_pages</code></dt>
              <dd>Generates the Custom error pages into the <code>/public</code> directory of your application.</dd>

              <dt><code>rails generate rrt:legal_pages</code></dt>
              <dd>Generates the Privacy and Terms of Services page template at <code>app/views/legal/terms_of_service.{erb|haml}</code> and <code>app/views/legal/privacy.{erb|haml}</code></dd>

              <dt><code>rails generate rrt:sidenav CONTROLLER ACTION</code></dt>
              <dd>Generates the Sidenav style template at app/views/CONTROLLER/ACTION</dd>

              <dt><code>rails generate rrt:timeline CONTROLLER ACTION</code></dt>
              <dd>Generates the User Timeline template at app/views/CONTROLLER/ACTION</dd>

              <dt><code>rails generate rrt:userprofile CONTROLLER ACTION</code></dt>
              <dd>Generates the User Profile template at app/views/CONTROLLER/ACTION</dd>

              <dt><code>rails generate rrt:usersettings CONTROLLER ACTION</code></dt>
              <dd>Generates the User Settings template at app/views/CONTROLLER/ACTION</dd>

              <dt><code>rails generate rrt:metrics_dashboard CONTROLLER ACTION</code></dt>
              <dd>Generates the Metrics Dashboard template at app/views/CONTROLLER/ACTION</dd>

              <dt><code>rails generate rrt:metrics_detail CONTROLLER ACTION</code></dt>
              <dd>Generates the Metrics Detail template at app/views/CONTROLLER/ACTION</dd>

              <dt><code>rails generate rrt:blog_post CONTROLLER ACTION</code></dt>
              <dd>Generates the Blog Post template at app/views/CONTROLLER/ACTION</dd>

              <dt><code>rails generate rrt:blog_archive CONTROLLER ACTION</code></dt>
              <dd>Generates the Blog Archive template at app/views/CONTROLLER/ACTION</dd>

            </dl>
          </section>

          <section>
            <h1 id='gem-integration' class="header">Gems integration</h1>


            <h2>WillPaginate</h2>
            <p>Using WillPaginate and its helper <code><%%= will_paginate %></code> will automatically render the Bootstrap pagination component.</p>

            <h2>Kaminari</h2>
            <p>Similarly, if you prefer Kaminari for pagination, <code><%%= paginate @users %></code> will automatically render the Bootstrap pagination component.</p>

            <h2>SimpleForm</h2>
            <p>This theme comes with its own SimpleForm wrapper. Use like so, and your controls will be wrapped in <code>control-group</code> divs with error messages, required markers and all that jazz.</p>
            For a horizontal form:

             <%= code_block do %>
               <%%= simple_form_for @user_horizontal, url: create_horizontal_examples_url, as: 'user_horizontal', html: { class: 'form-horizontal' },
                 wrapper: :horizontal_form,
                 wrapper_mappings: {
                   check_boxes: :horizontal_radio_and_checkboxes,
                   radio_buttons: :horizontal_radio_and_checkboxes,
                   file: :horizontal_file_input,
                   boolean: :horizontal_boolean
                 } do |f| %>
             <% end %>

             or for an inline form:

             <%= code_block do %>
               <%%= simple_form_for @user_inline, url: create_inline_examples_url, as: 'user_inline',
                 wrapper: :inline_form,
                 html: { class: 'form-inline' } do |f| %>
             <% end %>

             or just a simple form:

             <%= code_block do %>
               <%%= simple_form_for @user_basic, url: create_basic_examples_url, as: 'user_basic' do |f| %>
             <% end %>
            <p>If you have SimpleForm installed, scaffold view <code>_form</code> will use it instead of plain <code>form_for</code>.</p>

            <h2>Devise</h2>
            <p>If you have Devise installed for handling your authentication, all of its views will be styled.</p>
            <ul>
              <li>Sign in</li>
              <li>Sign up</li>
              <li>Edit settings</li>
              <li>Forgot your password</li>
              <li>Change your password</li>
              <li>Resend confirmation</li>
              <li>Resend unlock instructions</li>
            </ul>

            <h2>Devise Invitable</h2>
            <p>If you have Devise Invitable installed for handling invitation requests, all of its views will be styled.</p>
            <ul>
              <li>Request Invitation</li>
              <li>Accept Invitation</li>
            </ul>
          </section>
        </div>
        <div class="col-md-2" role="complementary">
          <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix">
            <ul class="nav bs-docs-sidenav">
              <li class="">
                <a href="#getting-started">Getting Started</a>
              </li>
              <li>
                <a href="#rails-helpers">Rails Helpers</a>
              </li>
              <li>
                <a href="#layouts">Layouts</a>
              </li>
              <li>
                <a href="#generators">Code Generators</a>
              </li>
              <li>
                <a href="#gem-integration">Gem Integration</a>
              </li>
            </ul>
            <a class="back-to-top" href="#top">
              Back to top
            </a>
          </nav>
        </div>

  </div>
